chapter1  Routing

routes are defined in rroutes/web.php

like
	Route::get('/', function () {
    		return view('welcome');                     //this route of home page ,url='/'
	}); 

Route with controller
______________________

	Route::get('profile', [ProfileController::class, 'show']);

	or
	Route::get('profile','ProfileController@show');




Route Naming(reverse routing)
______________

	// Defining a named route
		Route::get('dashboard', [DashboardController::class, 'index'])->name('dashboard');

	// Generating URL using route name
		$url = route('dashboard');

	// Redirecting to named route
		return redirect()->route('dashboard');






Route Groups
_________________

	// Grouping routes with a prefix
		Route::prefix('admin')->group(function () {
    			Route::get('/dashboard', [AdminController::class, 'dashboard']);
   			 Route::get('/profile', [AdminController::class, 'profile']);
		});

OR

		Route::group(['prefix'=>'admin'],function(){

			Route::get('profile','ProfileController@show');
			Route::get('profile1','ProfileController@show1');


		})		//here the url like http://127.0.0.1:8000/admin/profile and http://127.0.0.1:8000/admin/profile1


		
		Route::group(['prefix'=>'admin','as'=>'user.'],function(){

			Route::get('profile','ProfileController@show')->name(profile);
			Route::get('profile1','ProfileController@show1')->name(profile1);

		})	//here the url like http://127.0.0.1:8000/admin/profile   and name=user.profile




		// Grouping routes with middleware
			Route::middleware(['auth'])->group(function () {
   			 	Route::get('/account', [AccountController::class, 'index']);
			});

Migrations
____________
	
	database related settings are done in config->database.php
	
	In database.php all setting values are taken .env file
	
	
	command to create a table : php artisan make:migration create_new_table --create= table_name	
	
	
	migration file
	_________________
	
	public function up()
    {
        Schema::create('your_table_name', function (Blueprint $table) {
            $table->id(); // Automatically creates an auto-incrementing primary key
            $table->string('name'); // Example column for a string
            $table->text('description')->nullable(); // Example nullable text column
            $table->integer('age'); // Example integer column
            $table->boolean('is_active')->default(true); // Example boolean column with default value
            $table->timestamps(); // Adds created_at and updated_at columns
        });
    }

	public function down()
    {
        Schema::dropIfExists('your_table_name');

    }

In colum creation
___________________

		public function up()
		{
    			Schema::table('table_name', function (Blueprint $table) {
        		$table->string('new_column')->nullable();
        		// Add other columns here if needed
			}
    		});
		
	
	`php artisan migrate:fresh	




Seeder
________

php artisan make:seeder seedr_name

to seed data through Model
eg: 

	use App\Models\User;

	class testSeeder extends Seeder
	{
    
    		public function run()
    		{
        	User::create([
            	'name' => 'test',
            	'email' => 'test@test.com',
            	'password' => 'testpsw',
        		]);
    		}
	}
	
to run the seeder :php artian db:seed --class=testSeeder



Factories
____________

which  iis used to stor bulk fake datas in DB,factories are created in rlation with a model

1)create model( model name beguns with capital letter) // php artisan make:Model Post
2)creat seedr   php arisan make:seeder Postseeder
3)create factory php artisan make:factory PostFactory

		// database/factories/PostFactory.php
			use App\Models\Post;
			use Illuminate\Database\Eloquent\Factories\Factory;

			class PostFactory extends Factory
			{
   				 // Specify the model associated with this factory
    				protected $model = Post::class;

    				public function definition()
    				{
        				return [
            					'title' => $this->faker->sentence(),
            					'content' => $this->faker->paragraph(),
        					];
    				}
			}




		// database/seeders/PostSeeder.php
			use App\Models\Post;
			use Illuminate\Database\Seeder;

			class PostSeeder extends Seeder
			{
    				public function run()
    				{
        				Post::factory()->count(50)->create();
    				}
			}

4) to run factory : php artisan db:seed --class=PostSeeder   // factory run through seeder


1. Accessors:
	An accessor allows you to format Eloquent model attributes when retrieving them.(a function write in model to get a field in model/from DB as thy specified in this function

eg;-
	class User extends Model
	{
   		 // Accessor for 'full_name' attribute(a fied i his model, we need every ime we fetch ,it should show/send first letter capitel

    		public function getFullNameAttribute($value)
    		{
        		return ucwords($value); // Capitalizes the first letter of each word
   		 }
	}

calling above in controller function

	$user = User::find(1);
	echo $user->full_name; // Output: "John Doe"



2. Mutators:
	A mutator allows you to modify an Eloquent model attribute's value before it is set or saved to the database.(a function write in model to set a field in model/to save into DB as 	they specified in this function)

eg:-

	class User extends Model
	{
    		// Mutator for 'full_name' attribute
    		public function setFullNameAttribute($value)
   		 {
        		$this->attributes['full_name'] = strtolower($value); // Convert to lowercase
    		}
	}



call above function in controller

		$user = new User();
		$user->full_name = "John Doe";
		$user->save();        // In the database, the full_name will be saved as "john doe"
		
			
	
	


	



